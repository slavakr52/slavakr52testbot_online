from aiogram import Router, F 
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import time

from data.db import Database
from app.middleware import Middleware1
from loader import bot
import app.keyboards as kb
import data.texts as my_text
import data.admins as admins

db = Database('data/database.db')

router = Router()
router.message.outer_middleware(Middleware1()) # –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
router.callback_query.outer_middleware(Middleware1()) # –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∫–æ–ª–ª–±—ç–∫–∞–º

# FSM –∫–ª–∞—Å—Å—ã

class Sendall(StatesGroup):
    text = State()
    photo = State()

class Userinfo(StatesGroup):
    name = State()
    contact = State()
    question = State()

class Sendone(StatesGroup):
    user_id = State()
    message = State()

# —Ö–µ–Ω–¥–ª–µ—Ä—ã

@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
    await message.answer(message.from_user.first_name + my_text.start, reply_markup=kb.start)

@router.message(Command('admin')) # –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
async def admin(message: Message):
    if int(message.from_user.id) == int(admins.admin1):
        await message.answer(my_text.admin_menu, reply_markup=kb.admin)
    else:
        await message.answer(my_text.admin_denied, reply_markup=kb.go_back)

# –∫–æ–ª–ª–±—ç–∫–∏

@router.callback_query(F.data == 'menu')
async def go(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(my_text.main_menu, reply_markup=kb.main_menu, parse_mode='Markdown')

@router.callback_query(F.data == 'about')
async def about(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(my_text.about, reply_markup=kb.go_back)

@router.callback_query(F.data == 'contacts')
async def contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(my_text.contacts, reply_markup=kb.go_back)

@router.callback_query(F.data == 'admin_statistics') # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤ + —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
async def contacts(callback: CallbackQuery):
    await callback.answer()
    users = db.get_users()
    users_active = 0
    users_count = 0
    for row in users:
        if int(row[1]) == 1:
            users_active += 1
        users_count += 1
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\t'
                                     + f'–ê–∫—Ç–∏–≤–Ω—ã—Ö: {users_active}\n\t'
                                     + f'–í—Å–µ–≥–æ: {users_count}', 
                                     reply_markup=kb.admin)

# FSM: Userinfo
    
@router.callback_query(F.data == 'write_us') # Userinfo 1 –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
async def userinfo_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Userinfo.name)
    await callback.message.answer('–í–∞—à–µ –∏–º—è:')

@router.message(Userinfo.name) # Userinfo 2 –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞
async def userinfo_2(message: Message, state: FSMContext):
    await state.update_data(name=message.text, user_id = message.from_user.id)
    await state.set_state(Userinfo.contact)
    await message.answer('–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

@router.message(Userinfo.contact) # Userinfo 3 –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
async def userinfo_3(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(Userinfo.question)
    await message.answer('–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?')

@router.message(Userinfo.question) # Userinfo 4 –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
async def userinfo_4(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    data = await state.get_data()
    user_id = data['user_id']
    question = data['question']
    name = data['name']
    contact = data['contact']
    await bot.send_message(admins.admin1, f'üö© –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id} üö©\n\n'
                           + question + f'\n\n–ò–º—è: {name}'
                           + f'\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {contact}')
    await message.answer('–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!', reply_markup=kb.go_back)
    await state.clear()

# FSM: Sendone (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞–¥–º–∏–Ω–∫–∞)

@router.callback_query(F.data == 'admin_sendone') # Sendone 1 –≤–≤–æ–¥ id
async def sendone_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Sendone.user_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    
@router.message(Sendone.user_id) # Sendone 2 –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async def sendone_2(message: Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    await state.set_state(Sendone.message)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')

@router.message(Sendone.message) # Sendone 3 –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
async def sendone_3(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    data = await state.get_data()
    await message.answer('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n'
                         + data['message'], reply_markup=kb.admin_mess_one)
    
@router.callback_query(F.data == 'admin_accept_one') # Sendone 4 –æ—Ç–ø—Ä–∞–≤–∫–∞
async def sendone_4(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    await bot.send_message(data['user_id'], 'üö© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üö©\n\n'
                           + data['message'])
    await callback.message.answer('‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=kb.admin)
    await state.clear()

# FSM: Sendall (—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞–¥–º–∏–Ω–∫–∞)

@router.callback_query(F.data == 'admin_sendall') # Sendall 1 –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
async def sendall_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(photo=None)
    await state.set_state(Sendall.text)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')

@router.message(Sendall.text) # Sendall 2 –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
async def sendall_2(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer('–ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É?', reply_markup=kb.admin_picture)

@router.callback_query(F.data == 'photo_yes') # Sendall 3 —ç—Ç–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞–¥–æ
async def sendall_3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Sendall.photo)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É')

@router.message(Sendall.photo) # Sendall 4 –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
async def sendall_4(message: Message, state: FSMContext):
    try:
        await state.update_data(photo=message.photo[-1].file_id)
        await message.answer('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', reply_markup=kb.admin_picture_ok)
    except TypeError:
        print ("Admin entering text instead of photo..")
    
@router.callback_query(F.data == 'preview') # Sendall 5 –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
async def sendall_5(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è', show_alert=True)
    data = await state.get_data()
    if data['photo']:
        await callback.message.answer_photo(photo=data['photo'],
                                            caption=data['text'],
                                            reply_markup=kb.admin_mess_all)
    else:
        await callback.message.answer(data['text'],
                                      reply_markup=kb.admin_mess_all)
        
@router.callback_query(F.data == 'admin_accept_all') # 
async def sendall_6(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    data = await state.get_data()
    users = db.get_users()
    for row in users:
        time.sleep(0.1)
        try:
            if data['photo']:
                await bot.send_photo(row[0],
                                     photo=data['photo'],
                                     caption=data['text'])
            else:
                await bot.send_message(row[0], 
                                       data['text'])
            if int(row[1]) != 1:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ —é–∑–µ—Ä–∞ —Å active=0, —Ç–æ active=1
                db.set_active(row[0], 1)
        except:
            db.set_active(row[0], 0) # –µ—Å–ª–∏ –Ω–µ –¥–æ—à–ª–æ, —Ç–æ active=0
    await callback.message.answer('‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=kb.admin)
    await state.clear()

@router.callback_query(F.data == 'admin_cancel') # Sendall + Sendone –æ—Ç–º–µ–Ω–∞
async def sendall_0(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(f'‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=kb.admin)
    await state.clear()

# –≤—Å–µ—è–¥–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

@router.message()
async def mes_all(message: Message):
    await message.answer(message.from_user.first_name + my_text.incorrect, reply_markup=kb.go_back)
   






